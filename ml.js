// Generated by CoffeeScript 1.7.1
(function() {
  var Closure, DTNode, Def, Node, RecClosure, derive, grammer, inspect, parser, util;

  util = require('util');

  grammer = require('./grammer');

  parser = grammer.parser;

  Node = (function() {
    function Node(type, children, value) {
      this.type = type;
      this.children = children;
      this.value = value;
    }

    Node.prototype.toString = function() {
      var str;
      return str = (function() {
        switch (this.type) {
          case 'DEFVAR':
            return "" + this.children[0].value + " = " + (this.children[1].toString().replace(/(?:^\(|\)$)/g, ''));
          case 'APPLY':
            return "" + (this.children[0].toString()) + " " + (this.children[1].toString());
          case 'LET':
            return "(let " + (this.children[0].toString()) + " in " + (this.children[1].toString()) + ")";
          case 'LETREC':
            return "(let rec " + (this.children[0].toString()) + " in " + (this.children[1].toString()) + ")";
          case 'IF':
            return "(if " + (this.children[0].toString()) + " then " + (this.children[1].toString()) + " else " + (this.children[2].toString()) + ")";
          case 'LT':
            return "(" + (this.children[0].toString()) + " < " + (this.children[1].toString()) + ")";
          case 'PLUS':
            return "(" + (this.children[0].toString()) + " + " + (this.children[1].toString()) + ")";
          case 'MINUS':
            return "(" + (this.children[0].toString()) + " - " + (this.children[1].toString()) + ")";
          case 'TIMES':
            return "(" + (this.children[0].toString()) + " * " + (this.children[1].toString()) + ")";
          case 'INT':
            return "" + this.value;
          case 'BOOL':
            return "" + this.value;
          case 'FUN':
            return "(fun " + (this.children[0].toString()) + " -> " + (this.children[1].toString()) + ")";
          case 'VAR':
            return "" + this.value;
          default:
            throw "Illigal Node";
        }
      }).call(this);
    };

    return Node;

  })();

  DTNode = (function() {
    function DTNode(rule, vars, env, premises) {
      this.rule = rule;
      this.vars = vars;
      this.env = env;
      this.premises = premises;
    }

    DTNode.prototype.toString = function(indentSize) {
      var env, i, indent, str, _i;
      if (indentSize == null) {
        indentSize = 0;
      }
      indent = '';
      for (i = _i = 0; 0 <= indentSize ? _i < indentSize : _i > indentSize; i = 0 <= indentSize ? ++_i : --_i) {
        indent += ' ';
      }
      env = this.env.map((function(_this) {
        return function(def) {
          return def.toString();
        };
      })(this)).join(', ');
      if (env) {
        env += ' ';
      }
      str = (function() {
        switch (this.rule) {
          case 'E-Int':
            return "" + env + "|- " + this.vars.i + " evalto " + this.vars.i + " by E-Int {}";
          case 'E-Bool':
            return "" + env + "|- " + this.vars.b + " evalto " + this.vars.b + " by E-Bool {}";
          case 'E-Fun':
            return "" + env + "|- fun " + (this.vars.c.x.toString()) + " -> " + (this.vars.c.e.toString()) + " evalto " + (this.vars.c.toString()) + " by E-Fun {}";
          case 'E-Var1':
            return "" + env + "|- " + this.vars.x + " evalto " + this.vars.v + " by E-Var1 {}";
          case 'E-Var2':
            return ("" + env + "|- " + this.vars.x + " evalto " + this.vars.v2 + " by E-Var2 {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-App':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " " + (this.vars.e2.toString()) + " evalto " + this.vars.v + " by E-App {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-AppRec':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " " + (this.vars.e2.toString()) + " evalto " + this.vars.v + " by E-AppRec {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-Let':
            return ("" + env + "|- let " + (this.vars.def.toString()) + " in " + (this.vars.e2.toString()) + " evalto " + this.vars.v + " by E-Let {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-LetRec':
            return ("" + env + "|- let rec " + (this.vars.def.toString()) + " in " + (this.vars.e2.toString()) + " evalto " + this.vars.v + " by E-LetRec {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-IfT':
            return ("" + env + "|- if " + (this.vars.e1.toString()) + " then " + (this.vars.e2.toString()) + " else " + (this.vars.e3.toString()) + " evalto " + this.vars.v + " by E-IfT {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-IfF':
            return ("" + env + "|- if " + (this.vars.e1.toString()) + " then " + (this.vars.e2.toString()) + " else " + (this.vars.e3.toString()) + " evalto " + this.vars.v + " by E-IfF {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-Plus':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " + " + (this.vars.e2.toString()) + " evalto " + this.vars.i3 + " by E-Plus {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-Minus':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " - " + (this.vars.e2.toString()) + " evalto " + this.vars.i3 + " by E-Minus {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-Times':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " * " + (this.vars.e2.toString()) + " evalto " + this.vars.i3 + " by E-Times {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'E-Lt':
            return ("" + env + "|- " + (this.vars.e1.toString()) + " < " + (this.vars.e2.toString()) + " evalto " + this.vars.b3 + " by E-Lt {\n") + this.premises.map((function(_this) {
              return function(p) {
                return p.toString(2);
              };
            })(this)).join(";\n") + "\n}";
          case 'B-Plus':
            return "" + this.vars.i1 + " plus " + this.vars.i2 + " is " + this.vars.i3 + " by B-Plus {}";
          case 'B-Minus':
            return "" + this.vars.i1 + " minus " + this.vars.i2 + " is " + this.vars.i3 + " by B-Minus {}";
          case 'B-Times':
            return "" + this.vars.i1 + " times " + this.vars.i2 + " is " + this.vars.i3 + " by B-Times {}";
          case 'B-Lt':
            return "" + this.vars.i1 + " less than " + this.vars.i2 + " is " + this.vars.b3 + " by B-Lt {}";
          default:
            return new "Illegal Derivation";
        }
      }).call(this);
      return str.replace(/^/mg, indent);
    };

    return DTNode;

  })();

  Def = (function() {
    function Def(name, value) {
      this.name = name;
      this.value = value;
    }

    Def.prototype.toString = function() {
      return "" + this.name + " = " + (this.value.toString());
    };

    return Def;

  })();

  Closure = (function() {
    function Closure(env, x, e) {
      this.env = env;
      this.x = x;
      this.e = e;
    }

    Closure.prototype.toString = function() {
      var env;
      env = this.env.map((function(_this) {
        return function(def) {
          return def.toString();
        };
      })(this)).join(', ');
      return "(" + env + ")[fun " + (this.x.toString()) + " -> " + (this.e.toString()) + "]";
    };

    return Closure;

  })();

  RecClosure = (function() {
    function RecClosure(env, name, c) {
      this.env = env;
      this.name = name;
      this.c = c;
    }

    RecClosure.prototype.toString = function() {
      var env;
      env = this.env.map((function(_this) {
        return function(def) {
          return def.toString();
        };
      })(this)).join(', ');
      return "(" + env + ")[rec " + this.name + " = fun " + (this.c.x.toString()) + " -> " + (this.c.e.toString()) + "]";
    };

    return RecClosure;

  })();

  parser.yy = {
    Node: Node
  };

  derive = function(node, env) {
    var b, b3, c, def, dtn, dtn1, dtn2, dtn3, i1, i2, i3, recDef, v, v2, x, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    switch (node.type) {
      case 'ENVE':
        env = node.children[0].children.map((function(_this) {
          return function(n) {
            var dtn, v, _ref;
            _ref = derive(n, []), v = _ref[0], dtn = _ref[1];
            return v;
          };
        })(this));
        return derive(node.children[1], env);
      case 'INT':
        return [
          node.value, new DTNode('E-Int', {
            i: node.value
          }, env, [])
        ];
      case 'BOOL':
        return [
          node.value, new DTNode('E-Bool', {
            b: node.value
          }, env, [])
        ];
      case 'FUN':
        c = new Closure(env, node.children[0], node.children[1]);
        return [
          c, new DTNode('E-Fun', {
            c: c
          }, env, [])
        ];
      case 'VAR':
        x = node.value;
        def = env[env.length - 1];
        if (def.name === x) {
          return [
            def.value, new DTNode('E-Var1', {
              x: def.name,
              v: def.value
            }, env, [])
          ];
        } else {
          _ref = derive(node, env.slice(0, -1)), v2 = _ref[0], dtn = _ref[1];
          return [
            v2, new DTNode('E-Var2', {
              x: x,
              v2: v2
            }, env, [dtn])
          ];
        }
        break;
      case 'APPLY':
        _ref1 = derive(node.children[0], env), v = _ref1[0], dtn1 = _ref1[1];
        if (v instanceof Closure) {
          c = v;
          _ref2 = derive(node.children[1], env), v2 = _ref2[0], dtn2 = _ref2[1];
          _ref3 = derive(c.e, c.env.concat([new Def(c.x.value, v2)])), v = _ref3[0], dtn3 = _ref3[1];
          return [
            v, new DTNode('E-App', {
              e1: node.children[0],
              e2: node.children[1],
              v: v
            }, env, [dtn1, dtn2, dtn3])
          ];
        } else if (v instanceof RecClosure) {
          c = v.c;
          _ref4 = derive(node.children[1], env), v2 = _ref4[0], dtn2 = _ref4[1];
          _ref5 = derive(c.e, c.env.concat([new Def(v.name, v), new Def(c.x.value, v2)])), v = _ref5[0], dtn3 = _ref5[1];
          return [
            v, new DTNode('E-AppRec', {
              e1: node.children[0],
              e2: node.children[1],
              v: v
            }, env, [dtn1, dtn2, dtn3])
          ];
        }
        break;
      case 'DEFVAR':
        x = node.children[0].value;
        _ref6 = derive(node.children[1], env), v = _ref6[0], dtn = _ref6[1];
        return [new Def(x, v), dtn];
      case 'LET':
        _ref7 = derive(node.children[0], env), def = _ref7[0], dtn1 = _ref7[1];
        _ref8 = derive(node.children[1], env.concat([def])), v = _ref8[0], dtn2 = _ref8[1];
        return [
          v, new DTNode('E-Let', {
            def: node.children[0],
            e2: node.children[1],
            v: v
          }, env, [dtn1, dtn2])
        ];
      case 'LETREC':
        _ref9 = derive(node.children[0], env), def = _ref9[0], dtn1 = _ref9[1];
        recDef = new Def(def.name, new RecClosure(env, def.name, def.value));
        _ref10 = derive(node.children[1], env.concat([recDef])), v = _ref10[0], dtn2 = _ref10[1];
        return [
          v, new DTNode('E-LetRec', {
            def: node.children[0],
            e2: node.children[1],
            v: v
          }, env, [dtn2])
        ];
      case 'IF':
        _ref11 = derive(node.children[0], env), b = _ref11[0], dtn1 = _ref11[1];
        if (b) {
          _ref12 = derive(node.children[1], env), v = _ref12[0], dtn2 = _ref12[1];
          return [
            v, new DTNode("E-IfT", {
              e1: node.children[0],
              e2: node.children[1],
              e3: node.children[2],
              v: v
            }, env, [dtn1, dtn2])
          ];
        } else {
          _ref13 = derive(node.children[2], env), v = _ref13[0], dtn2 = _ref13[1];
          return [
            v, new DTNode("E-IfF", {
              e1: node.children[0],
              e2: node.children[1],
              e3: node.children[2],
              v: v
            }, env, [dtn1, dtn2])
          ];
        }
        break;
      case 'PLUS':
        _ref14 = derive(node.children[0], env), i1 = _ref14[0], dtn1 = _ref14[1];
        _ref15 = derive(node.children[1], env), i2 = _ref15[0], dtn2 = _ref15[1];
        i3 = i1 + i2;
        return [
          i3, new DTNode("E-Plus", {
            e1: node.children[0],
            e2: node.children[1],
            i3: i3
          }, env, [
            dtn1, dtn2, new DTNode("B-Plus", {
              i1: i1,
              i2: i2,
              i3: i3
            }, env, [])
          ])
        ];
      case 'MINUS':
        _ref16 = derive(node.children[0], env), i1 = _ref16[0], dtn1 = _ref16[1];
        _ref17 = derive(node.children[1], env), i2 = _ref17[0], dtn2 = _ref17[1];
        i3 = i1 - i2;
        return [
          i3, new DTNode("E-Minus", {
            e1: node.children[0],
            e2: node.children[1],
            i3: i3
          }, env, [
            dtn1, dtn2, new DTNode("B-Minus", {
              i1: i1,
              i2: i2,
              i3: i3
            }, env, [])
          ])
        ];
      case 'TIMES':
        _ref18 = derive(node.children[0], env), i1 = _ref18[0], dtn1 = _ref18[1];
        _ref19 = derive(node.children[1], env), i2 = _ref19[0], dtn2 = _ref19[1];
        i3 = i1 * i2;
        return [
          i3, new DTNode("E-Times", {
            e1: node.children[0],
            e2: node.children[1],
            i3: i3
          }, env, [
            dtn1, dtn2, new DTNode("B-Times", {
              i1: i1,
              i2: i2,
              i3: i3
            }, env, [])
          ])
        ];
      case 'LT':
        _ref20 = derive(node.children[0], env), i1 = _ref20[0], dtn1 = _ref20[1];
        _ref21 = derive(node.children[1], env), i2 = _ref21[0], dtn2 = _ref21[1];
        b3 = i1 < i2;
        return [
          b3, new DTNode("E-Lt", {
            e1: node.children[0],
            e2: node.children[1],
            b3: b3
          }, env, [
            dtn1, dtn2, new DTNode("B-Lt", {
              i1: i1,
              i2: i2,
              b3: b3
            }, env, [])
          ])
        ];
      default:
        throw "Illegal Token";
    }
  };

  inspect = function(obj) {
    return console.log(util.inspect(obj, {
      depth: null
    }));
  };

  module.exports = (function(_this) {
    return function(code) {
      return derive(parser.parse(code), []);
    };
  })(this);

}).call(this);
